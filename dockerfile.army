# Use the official PHP image with Apache
FROM php:8.2.8-apache

# Set working directory to Laravel root
WORKDIR /var/www/html

# Install system dependencies
RUN apt-get update && \
  DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
  libpng-dev \
  libjpeg-dev \
  libfreetype6-dev \
  libwebp-dev \
  libx11-xcb1 \
  libxcomposite1 \
  libasound2 \
  libatk1.0-0 \
  libatk-bridge2.0-0 \
  libcairo2 \
  libcups2 \
  libdbus-1-3 \
  libexpat1 \
  libfontconfig1 \
  libgbm1 \
  libgcc1 \
  libglib2.0-0 \
  libgtk-3-0 \
  libnspr4 \
  libnss3 \
  libpango-1.0-0 \
  libpangocairo-1.0-0 \
  libstdc++6 \
  libx11-6 \
  libx11-xcb1 \
  libxcb1 \
  libxcomposite1 \
  libxcursor1 \
  libxdamage1 \
  libxext6 \
  libxfixes3 \
  libxi6 \
  libxrandr2 \
  libxrender1 \
  libxss1 \
  libxtst6 && \
  apt-get install -y --no-install-recommends default-mysql-client zip unzip git curl && \
  rm -rf /var/lib/apt/lists/*

# Explicitly set PHP memory limit
RUN sed -i 's/memory_limit = .*/memory_limit = 256M/' /usr/local/etc/php/php.ini-development && \
  sed -i 's/memory_limit = .*/memory_limit = 256M/' /usr/local/etc/php/php.ini-production && \
  cp /usr/local/etc/php/php.ini-production /usr/local/etc/php/php.ini

# Configure GD with additional support
RUN docker-php-ext-configure gd --with-freetype --with-jpeg --with-webp

# Install PHP extensions
RUN docker-php-ext-install pdo pdo_mysql gd

# Install Composer globally
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer

# Modify the default Apache port from 80 to 8080
RUN sed -i 's/80/8080/g' /etc/apache2/sites-available/000-default.conf /etc/apache2/ports.conf

# Modify the default Apache configuration to point to Laravel's public directory
RUN sed -i 's|DocumentRoot /var/www/html|DocumentRoot /var/www/html/public|' /etc/apache2/sites-available/000-default.conf

# Enable mod_rewrite for Apache
RUN a2enmod rewrite


# Copy the existing Laravel project into the container
COPY . /var/www/html/

# Replace current project files with ADFS files
RUN mv /var/www/html/ADFS/session.php /var/www/html/config && \
  mv /var/www/html/ADFS/AuthController.php /var/www/html/app/Http/Controllers

# Delete ADFS directory
RUN rm -rf /var/www/html/ADFS

# Workaround to allow Composer install as a superUser
ENV COMPOSER_ALLOW_SUPERUSER=1

# Run Composer install for Laravel project dependencies
RUN composer install --ignore-platform-reqs






# Clear the contents of the laravel.log file
RUN truncate -s 0 /var/www/html/storage/logs/laravel.log

# Grant permissions for Laravel's storage and bootstrap/cache directories
RUN chown -R www-data:www-data storage bootstrap/cache

# Additionally, set the permissions for the directories
RUN chmod -R 777 storage bootstrap/cache
RUN rm -rf /var/www/html/bootstrap/cache/config.php

# Add the cache:clear command
RUN php artisan cache:clear

# Add the config:clear command
RUN php artisan config:clear

# Add the php artisan optimize command
RUN php artisan optimize

# add the php artisan l5-swagger:generate command
RUN php artisan l5-swagger:generate

# Add the storage:link command
RUN php artisan storage:link

# Create a script to run Laravel Scheduler
RUN echo '#!/bin/bash\n\
  # Start Apache in the foreground\n\
  apache2-foreground &\n\
  # Start the scheduler in a separate process\n\
  (\n\
  while [ true ]; do\n\
  php /var/www/html/artisan schedule:run --verbose --no-interaction &\n\
  sleep 60\n\
  done\n\
  ) &\n\
  # Monitor the scheduler process\n\
  SCHEDULER_PID=$!\n\
  while [ -e /proc/$SCHEDULER_PID ]; do\n\
  # Optionally, add any monitoring or logging code here\n\
  sleep 5\n\
  done\n\
  fi' > /usr/local/bin/start-scheduler

# Execute the command to clear Laravel log file
RUN echo "" > storage/logs/laravel.log

# Make the script executable
RUN chmod +x /usr/local/bin/start-scheduler

# Add a health check instruction
HEALTHCHECK --interval=5m --timeout=3s \
  CMD curl -f http://localhost:8080/ || exit 1

# Expose port 8080
EXPOSE 8080

# Add www-data to sudoers
RUN echo 'www-data ALL=(ALL) NOPASSWD:ALL' >> /etc/sudoers

# Set password for www-data
RUN echo 'www-data:admin' | chpasswd

# Switch to user www-data for subsequent commands and container runtime
USER www-data

# Start script or Apache in the foreground based on the container role
CMD ["/usr/local/bin/start-scheduler"]